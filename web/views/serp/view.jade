script(type='text/javascript')
  var optionsColumn = {
    chart: {
        renderTo: 'job-chart',
        type: 'column',
        plotBorderWidth: 1
    },
    title: { },
    subtitle: { },
    yAxis: {
        min: 0,
        title: {
            text: 'Keyword position'
        }
    },
    xAxis: { },
    legend: {
        layout: 'vertical',
        backgroundColor: '#FFFFFF',
        align: 'left',
        verticalAlign: 'top',
        x: 100,
        y: 70,
        floating: true,
        shadow: true
    },
    tooltip: {
        formatter: function() {
            return this.x +': '+ this.y;
        }
    },
    plotOptions: {
      column: {
          pointPadding: 0.2,
          borderWidth: 0
      }
    },
  };

  var lineChartOptions = {
    chart: {
        renderTo: 'job-chart-line',
        type: 'column',
        plotBorderWidth: 1
    },
    title: { },
    subtitle: { },
    yAxis: {
        min: 0,
        title: {
            text: 'Keyword position'
        }
    },
    xAxis: { },
    legend: {
        layout: 'vertical',
        backgroundColor: '#FFFFFF',
        align: 'center',
        verticalAlign: 'bottom',
        //floating: true,
        shadow: true
    },
    tooltip: {
        formatter: function() {
            return this.x +': '+ this.y;
        }
    },
    plotOptions: {
      column: {
          pointPadding: 0.2,
          borderWidth: 0
      }
    },
  };

  var optionsGroupd = {
    chart: {
      renderTo: 'job-total-chart',
      type: 'column',
      plotBorderWidth: 1
    },
    title: { },
    xAxis: { },
    yAxis: {
      allowDecimals: false,
      min: 0,
      title: {
        text: 'Total position'
      }
    },
    legend: {
      enabled: false
    },
    tooltip: {
      formatter: function() {
        var name = this.series.name.split(' - ');
        return '<b>'+ name[1] +'</b><br/>'+
          name[0] +': '+ this.y +'<br/>'+
          'Total: '+ this.point.stackTotal;
      }
    },
    plotOptions: {
      column: {
        stacking: 'normal'
      }
    },
    series: []
  };

  function getOverallStats(jobid, options) {
    $.get('/serp/stats/overall/' + jobid, function(result) {
      options.title.text        = "Overall job stats";
      options.xAxis.categories  = result.categories;
      options.series            = result.series;
      chart = new Highcharts.Chart(options);
      getOverallStatsTable(result);
    });     
  }

  function getOverallStatsTable(results) {
    results.categories.forEach(function(categorie) {
      $h3 = $('<h4>', { text: categorie });
      $table = $('<div>');
      $table.append($h3);
      $('#overall-table').append($table);
    });
  }

  var listItemSelect = {
    options: {},
    self: this,

    renderList: function(items) {
      var self = this;
      items.forEach(function(item, index) {
        $item = $('<li>', {
          class: (index == 0) ? 'active' : ''  
        }).append($('<a>', {
            text: item
          , href: '#' + item
        }));

        self.options.list.append($item);
      });
    },

    loadChart: function(selectedKey, cb) {
      var self = this;
      this.loadData(function(err, result) {
        if (selectedKey == null) selectedKey = Object.keys(result)[0];

        self.options.chartOptions.title.text       = selectedKey;
        self.options.chartOptions.xAxis.categories = result[selectedKey].categories;
        self.options.chartOptions.series           = result[selectedKey].series;

        chart = new Highcharts.Chart(self.options.chartOptions);  
        return cb(null, result);
      })
    },

    addListItemClickListener: function() {
      var self = this;
      this.options.list.on('click', 'li', function(e) {
        $(this).parent().find('.active').removeClass('active');
        $(this).addClass('active');
        
        var select = $(this).find('a').text();
        self.loadChartWihtoutSidebar(select);
      });
    },

    loadChartWihtoutSidebar: function(selected) {
      var self = this;
      self.loadChart(selected, function(err, result) { });
    },

    loadChartWithItems: function() {
      var self = this;
      self.loadChart(null, function(err, result) {
        // Get the list items
        var itemNames = Object.keys(result);
        self.renderList(itemNames);
        self.addListItemClickListener();
      });


    },

    loadData: function(cb) {
      var self = this;
      $.get(this.options.url, function(result) {
        return cb(null, result);
      });
    },

    init: function(options, loadItemData) {
      this.options = options;
      if (loadItemData) 
        this.loadChartWithItems();

    }
  };

  head.ready(function() {
    var totalChartOptions = {
        chartOptions: lineChartOptions
      , url: '/serp/stats/line/#{job._id}'
      , list: $('#total-match')
    };

    var matchChartOptions = {
        chartOptions: optionsColumn
      , url: '/serp/stats/#{job._id}'
      , list: $('ul#match')
    };

    listItemSelect.init(totalChartOptions, true);

    // Load data only when the tab is selected
    $('a[data-toggle="tab"]').on('shown', function(e) {
      function isChartLoaded(container) {
        return $('#' + container).find('.highcharts-container').length ? true : false;
      }

      switch ($(e.target).attr('href')) {
        case '#total':
          if (!isChartLoaded(lineChartOptions.chart.renderTo)) {
            //listItemSelect.init(totalChartOptions);
          }
        break;

        case '#grouped':
          if (!isChartLoaded(optionsGroupd.chart.renderTo))
            getOverallStats('#{job._id}', optionsGroupd);
        break;

        case '#match':
          if (!isChartLoaded(optionsColumn.chart.renderTo)) {
            listItemSelect.init(matchChartOptions, true);
          }
        break;

        default:

      }
    });
  });

h1 View of job "#{job.name}"
br

div.tabbable
  ul.nav.nav-tabs
    li.active
      a(href='#total',data-toggle='tab') Total
    li
      a(href='#grouped',data-toggle='tab') Grouped stats
    li
      a(href='#match',data-toggle='tab') Matched stats

  div.tab-content
    div.tab-pane.active#total
      h3 Keywords total line chart
      div.row
        br
        div.span3
          h3 Search engine:
          ul.nav.nav-pills.nav-stacked#total-match
        div.span9
          div(id="job-chart-line")

    div.tab-pane#grouped
      h3 View of overall stats
      div(class='span12',id="job-total-chart")

    div.tab-pane#match
      h3 Each matched item stats
      div.row
        br
        div.span3
          h3 Matching item:
          ul.nav.nav-pills.nav-stacked#match
        div.span9
          div(id="job-chart")